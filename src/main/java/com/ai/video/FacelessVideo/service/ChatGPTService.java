package com.ai.video.FacelessVideo.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.Map;

@Service
public class ChatGPTService {

    @Value("${openai.api.key}")
    private String apiKey;
    
    /**
     * Generate Vietnamese article from headline (original method) - kept for backward compatibility
     */
    public String generateArticleFromHeadline(String headline) {
        String prompt = "Vi·∫øt b√†i b√°o kho·∫£ng 200 t·ª´ d·ª±a tr√™n ti√™u ƒë·ªÅ: \"" + headline + "\"";

        WebClient client = WebClient.create("https://api.openai.com");

        Map<String, Object> requestBody = Map.of(
            "model", "gpt-3.5-turbo",
            "messages", new Object[] {
                Map.of("role", "user", "content", prompt)
            }
        );

        return client.post()
                .uri("/v1/chat/completions")
                .header("Authorization", "Bearer " + apiKey)
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(Map.class)
                .map(response -> {
                    var choices = (java.util.List<Map<String, Object>>) response.get("choices");
                    return (String) ((Map<String, Object>) choices.get(0).get("message")).get("content");
                })
                .block();
    }

    /**
     * Generate Vietnamese article from headline - optimized for 30-second video with 5 parts (150-200 words)
     * This will create approximately 30 seconds of speech when divided into 5 parts (~6 seconds each)
     */
    public String generateVietnameseArticleFromHeadline(String headline) {
        try {
            String prompt = "Vi·∫øt b√†i b√°o ti·∫øng Vi·ªát chi ti·∫øt t·ª´ 150-200 t·ª´ d·ª±a tr√™n ti√™u ƒë·ªÅ: \"" + headline + "\". " +
                          "B√†i vi·∫øt c·∫ßn c√≥ c·∫•u tr√∫c r√µ r√†ng v·ªõi 5 ph·∫ßn: m·ªü ƒë·∫ßu, 3 ph·∫ßn n·ªôi dung ch√≠nh, v√† k·∫øt lu·∫≠n. " +
                          "Kh√¥ng bao g·ªìm c√°c k√Ω t·ª± m·ªü ƒë·∫ßu,n·ªôi dung 1, n·ªôi dung 2, n·ªôi dung 3, k·∫øt lu·∫≠n ·ªü ƒë·∫ßu m·ªói ph·∫ßn"+
                          "M·ªói ph·∫ßn n√™n c√≥ ƒë·ªô d√†i t∆∞∆°ng ƒë∆∞∆°ng nhau ƒë·ªÉ ph√π h·ª£p chia th√†nh 5 ƒëo·∫°n video ng·∫Øn. " +
                          "S·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n, d·ªÖ hi·ªÉu v√† ph√π h·ª£p ƒë·ªÉ ƒë·ªçc th√†nh gi·ªçng n√≥i nam. " +
                          "Tr√°nh s·ª≠ d·ª•ng k√Ω hi·ªáu ƒë·∫∑c bi·ªát hay s·ªë li·ªáu ph·ª©c t·∫°p. " +
                          "ƒê·∫£m b·∫£o n·ªôi dung ƒë·∫ßy ƒë·ªß, chi ti·∫øt v√† h·∫•p d·∫´n."+
                          "h√£y gi·ªØ m·ªói b√†i vi·∫øt ch·ªâ k√©o d√†i kho·∫£ng 1-2 d√≤ng, ch·ªâ g√≥i g·ªçn trong t·ªëi ƒëa 858 k√Ω t·ª±.";

            WebClient client = WebClient.create("https://api.openai.com");

            Map<String, Object> requestBody = Map.of(
                "model", "gpt-3.5-turbo",
                "messages", new Object[] {
                    Map.of("role", "system", "content", "B·∫°n l√† m·ªôt nh√† b√°o chuy√™n nghi·ªáp vi·∫øt b√†i tin t·ª©c ti·∫øng Vi·ªát. " +
                           "H√£y vi·∫øt b√†i chi ti·∫øt, ƒë·∫ßy ƒë·ªß th√¥ng tin v√† c√≥ c·∫•u tr√∫c r√µ r√†ng ph√π h·ª£p cho video 50 gi√¢y."),
                    Map.of("role", "user", "content", prompt)
                },
                "temperature", 0.7,
                "max_tokens", 500 // Increased for longer articles
            );

            Map<String, Object> response = client.post()
                    .uri("/v1/chat/completions")
                    .header("Authorization", "Bearer " + apiKey)
                    .bodyValue(requestBody)
                    .retrieve()
                    .bodyToMono(Map.class)
                    .block();

            if (response == null) {
                throw new RuntimeException("No response from OpenAI API");
            }

            var choices = (java.util.List<Map<String, Object>>) response.get("choices");
            if (choices == null || choices.isEmpty()) {
                throw new RuntimeException("No choices in article generation response");
            }

            String article = (String) ((Map<String, Object>) choices.get(0).get("message")).get("content");
            
            System.out.println("‚úÖ Vietnamese article generated successfully (optimized for 5 parts)");
            System.out.println("üìù Article length: " + article.length() + " characters");
            System.out.println("üìñ Word count: " + article.split("\\s+").length + " words");
            System.out.println("‚è±Ô∏è Expected video duration: ~30 seconds (5 parts √ó 6 seconds each)");
            System.out.println("üìÑ Preview: " + article.substring(0, Math.min(100, article.length())) + "...");
            
            return article.trim();

        } catch (Exception e) {
            System.err.println("‚ùå Vietnamese article generation failed: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Vietnamese article generation failed: " + e.getMessage());
        }
    }
}